target Cpp {
    ros2: true,
    keepalive: true,
    ros2-dependencies: ["bench_pack"]
}

import Publisher from "./BackendPub.lf";

reactor PrepareMessage{
    private preamble {=
        #include "bench_pack/msg/user_data.hpp"
    =}

    timer t(0, 1000000 ns)
    output send_port: {=bench_pack::msg::UserData=}
    state counter: int(0)

    reaction(t) -> send_port {=
        reactor::log::Info() << "Publish message #" << counter;
        auto usr_msg = bench_pack::msg::UserData();  
        usr_msg.message = "Message with index: " + std::to_string(counter++);
        send_port.set(usr_msg);

        if(counter >= 5000){
            request_stop();
        }
    =}
}

main reactor UserPub{
    prepMsg = new PrepareMessage();
    publisher = new Publisher();

    prepMsg.send_port -> publisher.message_to_send;
}
